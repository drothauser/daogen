## = = = = = = = = = = = = = = = 
##    DAO Junit source template
## = = = = = = = = = = = = = = = 
/*
 * (c) $DateTool.get('yyyy') Rothsmith, LLC, All Rights Reserved
 */
package $daoCfgMetaData.getTestPackageName();
##
## Use for $ literal
##
#set($D = '$')
##
## Use for brace literals i.e. {}
##
#set($OB = '{')
#set($CB = '}')
##
## Comment line separators for word wrap
##
#set ($commentSepClass = ${lineSeparator} + " * ")
#set ($commentSepMethod = ${lineSeparator} + "	 * ")
#set ($methodCommentSeparator = ${lineSeparator} + "    ")
#set ($junitClassName = "$daoCfgMetaData.getClassName()Test")
#set ($daoVarName = "$daoCfgMetaData.getClassName().substring(0,1).toLowerCase()$daoCfgMetaData.getClassName().substring(1)")
#set ($dtoClassName = "$daoCfgMetaData.getDtoClassMetaData().getClassName()")
#set ($dtoVarName = "$dtoClassName.substring(0,1).toLowerCase()$dtoClassName.substring(1)")
#set ($dtoListVarName = "${dtoVarName}s")
#set ($dtoClassMetaData = $daoCfgMetaData.getDtoClassMetaData())
#set ($tableName = "$StringUtils.substringBeforeLast($daoCfgMetaData.getClassName().toLowerCase(),'dao')")
##
## Get method metadata list and field metadata list
##
#set($dtoMethodMetaDataList = $dtoClassMetaData.getDtoMethodMetaDataList())
#set($colMetaDataList = $dtoClassMetaData.getColMetaDataList())
#set($hasPk = $pkMetaData.size() > 0)
#set($hasId = false)
#if(!$hasPk)
#foreach($dtoMethodMetaData in $dtoMethodMetaDataList)
	#set ($column = $dtoMethodMetaData.getColumnMetaData().getColumnName().toLowerCase())
	#if($column == 'value')
		#set($hasValue = true)		
	#elseif($column.toLowerCase().endsWith('id') && $hasId == false)
	    #set($hasId = true)
		#set ($idColumn = $StringUtils.capitalize($column))	   
		#set ($idColumnJavaName = $dtoMethodMetaData.getMethodName())
		#set ($idColumnType = $dtoMethodMetaData.getClassTypeName())
	#end   
#end
#end

##
## Build import list
##
#foreach($packageName in $dtoClassMetaData.getPackageMap())
import $packageName;
#end
import java.io.*;
import java.util.*;
import java.util.Map.Entry;
import java.sql.*;
import static org.junit.Assert.*;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.SystemUtils;
import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.dbcp.BasicDataSource;
import org.apache.commons.io.IOUtils;
import org.apache.commons.io.FileUtils;
import org.apache.commons.collections.CollectionUtils;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;

import $daoCfgMetaData.getPackageName().$dtoClassName;
import net.rothsmith.dao.JdbcDao;
import net.rothsmith.dao.dbutils.DbUtilsJdbcDao;
import org.unitils.UnitilsJUnit4TestClassRunner;
import org.unitils.database.DatabaseUnitils;
import org.unitils.database.annotations.Transactional;
import org.unitils.database.util.TransactionMode;

/**
 * Test for the $daoVarName DbUtils Generic DAO.
 * 
 * @author $daoCfgMetaData.getUser()
 * 
 */
@RunWith(UnitilsJUnit4TestClassRunner.class)
@Transactional(TransactionMode.ROLLBACK)
public class $junitClassName {

	/**
	 * Logger for $junitClassName.	 
	 */
	private static final Logger LOGGER =
		LoggerFactory.getLogger(${junitClassName}.class);

	/**
	 * Stub {@link $dtoClassName} object.
	 */
	private $dtoClassName stubDto;
	
	/**
	 * {@link DbUtilsJdbcDao} to test.
	 */
	private DbUtilsJdbcDao<$dtoClassName, $dtoClassName> $daoVarName;

	/**
	 * Create database objects for testing.
	 * 
	 * @throws IOException
	 *             possible problem loading the properties file
	 * @throws SQLException
	 *             possible SQL error
	 * @throws NamingException possible error initializing JNDI
	 *
	 */
	@BeforeClass
	public static void setUpBeforeClass() 
		throws IOException, SQLException, NamingException {
		
		Properties props = new Properties();
		## String propsFile = "daogen.properties";
		String propsFile = "unitils.properties";
		InputStream inputStream = Thread.currentThread().getContextClassLoader()
		    .getResourceAsStream(propsFile);

		if (inputStream != null) {
			props.load(Thread.currentThread().getContextClassLoader()
			    .getResourceAsStream(propsFile));
			
			System.setProperty(Context.INITIAL_CONTEXT_FACTORY,
			    "org.osjava.sj.memory.MemoryContextFactory");
			System.setProperty("org.osjava.sj.jndi.shared", "true");
	
			InitialContext ctx = new InitialContext();
	
			DataSource dataSource = DatabaseUnitils.getDataSource();
	
			// ctx.rebind(jdbcSubcontext + dbAlias, dataSource);
			ctx.rebind("$jndiName", dataSource);
	
			try (Connection conn = dataSource.getConnection()) {
	
				String createSql = fetchSql(props, "db.create.sql");
	
				String populateSql = fetchSql(props, "db.populate.sql");
	
				String initSql = createSql + populateSql;
	
				if (!"".equals(initSql)) {
				String[] sqlStmts = initSql.split("(?<!\\-{2}.{0,100});");
					for (String sql : sqlStmts) {
						try (Statement stmt = conn.createStatement()) {
							LOGGER.info(String.format("%nExecuting %s", sql));
							stmt.executeUpdate(sql);
							LOGGER.info("\nDone!");
						} catch (SQLException e) {
							String msg =
							    String
							        .format(
							            "Initialization error running SQL statement: %s: %s",
							            sql, e);
							LOGGER.error(msg, e);
							fail("Initialization error running SQL statements: "
							    + e.getMessage());
						}
					}
				}
			}
		}
	}
	
	/**
	 * Initializes the $daoCfgMetaData.getClassName() bean from a properties file.
	 * 
	 * @throws java.lang.Exception
	 *             possible exception
	 */
	@Before
	public final void setUp() throws Exception {	
	
		$daoVarName =
		    new DbUtilsJdbcDao<$dtoClassName, $dtoClassName>("/${daoVarName.toLowerCase()}.properties");

		stubDto = createStubDto();
#if (!$statementMap)	

		#if ($hasId)stubDto.set${idColumnJavaName}(fetchMaxId());#end
		##if ($hasId)#genMaxId(false $idColumnType $idColumnJavaName)#end
		
#foreach($value in $pkMetaData.values())
	#foreach($dtoMethodMetaData in $dtoMethodMetaDataList)		
		#set($colName=$dtoMethodMetaData.getColumnMetaData().getColumnName())		
		#if($value.getColumnName() == $colName)
			#set($isAutoIncrement=$dtoMethodMetaData.getColumnMetaData().getAutoIncrement())
			#set($type=$dtoMethodMetaData.getClassTypeName())
			#set($methodName=$dtoMethodMetaData.getMethodName())
			
			#genMaxId($isAutoIncrement $type $methodName)
						
		#end
	#end
	#break
#end
				
		Object id = ${daoVarName}.insert(stubDto);
		
		LOGGER.info("groupsDao.insert(stubDto) = " + id);

		## assertTrue("Expected Id to be greater than " + maxId, 
		##	   newId.compareTo(maxId.intValue()) > 0);
		
#foreach($value in $pkMetaData.values())
	#foreach($dtoMethodMetaData in $dtoMethodMetaDataList)		
		#set($colName=$dtoMethodMetaData.getColumnMetaData().getColumnName())		
		#if($value.getColumnName() == $colName)
			#set($isAutoIncrement=$dtoMethodMetaData.getColumnMetaData().getAutoIncrement())
			#set($type=$dtoMethodMetaData.getClassTypeName())
			#set($methodName=$dtoMethodMetaData.getMethodName())
			#if($type=='oracle.sql.ROWID' || (($type=='java.math.BigDecimal' || $type=='java.lang.Integer' || $type=='java.sql.Timestamp') && $isAutoIncrement))
			stubDto = fetchMax${methodName}();
			#end
		#end
	#end
	#break
#end
#*
#foreach($value in $pkMetaData.values())
	#foreach($dtoMethodMetaData in $dtoMethodMetaDataList)		
		#set($colName=$dtoMethodMetaData.getColumnMetaData().getColumnName())		
		#if($value.getColumnName() == $colName)
			#set($isAutoIncrement=$dtoMethodMetaData.getColumnMetaData().getAutoIncrement())
			#set($type=$dtoMethodMetaData.getClassTypeName())
			#set($methodName=$dtoMethodMetaData.getMethodName())
			#if($type=='oracle.sql.ROWID' || (($type=='java.math.BigDecimal' || $type=='java.lang.Integer' || $type=='java.sql.Timestamp') && $isAutoIncrement))
				stubDto.set${methodName}(fetchMax${methodName}());
			#end			
		#end
	#end
#end
*#

#end
	}



	/**
	 * Stub up a {@link $dtoClassName} object.
	 * 
	 * @return a $dtoClassName object populated with test data.
	 */
	private $dtoClassName createStubDto() {
	
		$dtoClassName ${dtoVarName} = new $dtoClassName();
#set($setters = "#stubDto($pkMetaData $dtoMethodMetaDataList)")
#set($BS = '\')
#set($settersFormatted = $setters.replaceAll("^${BS}s+","${lineSeparator}\\u0009\\u0009"))
$settersFormatted
		return ${dtoVarName};

	}

#if (!$statementMap)	

	/**
	 * Test updating a $tableName record.
	 */
	@Test
	public final void testUpdate() {
		
#if($pkMetaData.size() > 0)
		$dtoClassName params = new $dtoClassName();
#set($setters = "#keySetter($pkMetaData $dtoMethodMetaDataList)")
#set($BS = '\')
#set($settersFormatted = $setters.replaceAll("${BS}s+","${lineSeparator}\\u0009\\u0009"))
$settersFormatted
#elseif ($hasId)
		$dtoClassName params = new $dtoClassName();
		params.set${idColumnJavaName}(stubDto.get${idColumnJavaName}());
#else
		// TODO - Table has no primary key or ID column. You must set your own criteria.
		$dtoClassName params = stubDto;
#end
		
		List<$dtoClassName> ${dtoListVarName} = ${daoVarName}.select(params);

		$dtoClassName ${dtoVarName} = ${dtoListVarName}.get(0);
		// Alter a field value:
		// ${dtoVarName}.set...

		int numRecs = ${daoVarName}.update(${dtoVarName});

#if($pkMetaData.size() > 0 || $hasId )
		assertEquals("Expected number of records updated to = 1", 1, numRecs);
#else
		assertTrue("Expected number of records updated to be > 0", numRecs > 0);
#end


	}
	
	/**
	 * Test deleting a $tableName record.
	 */
	@Test
	public final void testDelete() {
		
#if($pkMetaData.size() > 0)
		$dtoClassName params = new $dtoClassName();
#set($setters = "#keySetter($pkMetaData $dtoMethodMetaDataList)")
#set($BS = '\')
#set($settersFormatted = $setters.replaceAll("${BS}s+","${lineSeparator}\\u0009\\u0009"))
$settersFormatted
#elseif ($hasId)
		$dtoClassName params = stubDto;
#else
		// TODO - Table has no primary key or ID column. You must set your own criteria.
		$dtoClassName params = stubDto;
#end
		
		int numRecs = ${daoVarName}.delete(params);

#if($pkMetaData.size() > 0)
		assertEquals("Expected number of records updated to = 1", 1, numRecs);
#else
		assertTrue("Expected number of records updated to be > 0", numRecs > 0);
#end

	}

#if ($hasId)
##if ($pkMetaData.size() == 0)
	/**
	 * Test select from the ${tableName} table using an ID column.
	 */
	@Test
	public final void testSelectById() {

		$dtoClassName params = new $dtoClassName();
		
		$idColumnType testId = stubDto.get${idColumnJavaName}();		
		params.set${idColumnJavaName}(testId);

		String statementKey = "query.select";
		List<$dtoClassName> $dtoListVarName =
			${daoVarName}.selectByStatement(statementKey, params);

		if (!CollectionUtils.isEmpty(${dtoListVarName})) {
			$dtoClassName ${dtoVarName} = ${dtoListVarName}.get(0);
			if (LOGGER.isDebugEnabled()) {
				LOGGER.debug("Selected = " + ${dtoVarName}.toString());
			}
			assertTrue("Expected id ${idColumn} to contain " + testId,
					StringUtils.containsIgnoreCase(${dtoVarName}.get${idColumnJavaName}().toString(),
							testId.toString()));
		} else {
			String recs =
				(${dtoListVarName} == null) ? "null" : Integer
					.toString(${dtoListVarName}.size());
			fail("Expected " + statementKey
				+ " to return 1 record but it returned " + recs);
		}

	}
#end
   
#if ($pkMetaData.size() > 0)
	/**
	 * Test select by primary key from ${tableName}.
	 */
	@Test
	public final void testSelectByPrimaryKey() {

		$dtoClassName params = new $dtoClassName();
		
		$StringUtils.replace($StringUtils.replace($StringUtils.replaceChars("#keySetter($pkMetaData $dtoMethodMetaDataList)","\\u0009",''),"$lineSeparator","${lineSeparator}\\u0009\\u0009"),'\',"")
		List<$dtoClassName> ${dtoListVarName} = ${daoVarName}.select(params);
	
		if (${dtoListVarName} != null && ${dtoListVarName}.size() == 1) {
			$dtoClassName ${dtoVarName} = ${dtoListVarName}.get(0);
			if (LOGGER.isDebugEnabled()) {
				LOGGER.debug("Selected = " + ${dtoVarName}.toString());
			}
		} else {
			fail("Expected select to return 1 record");
		}
	
	}
#end

    #if ($hasId)
/**
	 * Fetch the maximum id from ${tableName}.
	 *
	 * @return the maximum ${idColumn} value
	 */
	private ${idColumnType} fetchMaxId() {
	
		$dtoClassName params = new $dtoClassName();
	
	#if (${idColumnType} == "java.math.BigDecimal") #set ($returnZero = 'BigDecimal.ZERO')
	#elseif (${idColumnType} == "java.lang.String") #set ($returnZero = '"0"')
	#elseif (${idColumnType} == "java.lang.Integer") #set ($returnZero = 'Integer.valueOf(0)')
	#else #set ($returnZero = '"0"')
	#end

		List<$dtoClassName> ${dtoListVarName} =
			${daoVarName}.selectByStatement("query.selectMaxId", params);

		return !CollectionUtils.isEmpty(${dtoListVarName})
		? ${dtoListVarName}.get(0).get${idColumnJavaName}()
		: $returnZero;

	}
    #end

#foreach($value in $pkMetaData.values())
	#foreach($dtoMethodMetaData in $dtoMethodMetaDataList)
		#set($colName=$dtoMethodMetaData.getColumnMetaData().getColumnName())
		#if($value.getColumnName() == $colName)
			#set($pkColType=$dtoMethodMetaData.getClassTypeName())
			#set($methodName=$dtoMethodMetaData.getMethodName())

/**
	 * Fetch the maximum $colName from ${tableName}.
	 *
	 * @return the $dtoClassName that contains the maximum $colName value.
	 */
	private $dtoClassName fetchMax${methodName}() {
			List<$dtoClassName> ${dtoListVarName} =
			${daoVarName}.selectByStatement("query.selectMax${methodName}");
			
			if (${dtoListVarName} .isEmpty()) {
				throw new IllegalStateException(
			    	"No results returned. Is the DB populated?");
			}
			
			return ${dtoListVarName}.get(0);
		}
		#end
	#end
#end

#end

#foreach ($statementEntry in $statementMap.entrySet())
	#set($stmtKey=$statementEntry.key)
	#set($stmt=$statementEntry.value)    
	/**
	 * Test the following query:
	 * <code>$stmt</code>
	 */
	@Test
	public final void test$StringUtils.capitalize(${stmtKey})() {

		// TODO - Set parameter fields as needed.
		$dtoClassName params = stubDto;

		List<${dtoClassName}> $dtoListVarName = ${stmtKey}Dao.selectByStatement("query.${stmtKey}", params);

		assertTrue("Expected number of records returned to be > 0",
		    ${dtoListVarName}.size() > 0);
	
	}
    
#end

	/**
	 * Method to read the sql files specified in the given property of the
	 * properties file and concatenate their contents into a string.
	 * 
	 * @param props
	 *            {@link Properties} object that contains sql parameters
	 * @param sqlProperty
	 *            Name of the property in the property file that contains names
	 *            of SQL files.
	 * @return String containing the contents of all the SQL files
	 * @throws IOException
	 *             thrown if there is problem accessing a SQL file
	 */
	private static String fetchSql(Properties props, String sqlProperty)
	        throws IOException {

		String sqlFileNames = StringUtils.defaultString(props.getProperty(sqlProperty));

		StringBuilder sb = new StringBuilder();

		for (String sqlFileName : StringUtils.split(
		    StringUtils.deleteWhitespace(sqlFileNames), ',')) {

			String sql =
			    StringUtils.trim(IOUtils.toString(Thread.currentThread()
			        .getContextClassLoader().getResource(sqlFileName)));

			sb.append(sql);

		}

		return sb.toString();

	}
	
}


#* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
*                V e l o c i t y    M a c r o s
* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =*#
#macro( keySetter $pkMetaData $dtoMethodMetaDataList )
#foreach($value in $pkMetaData.values())
	#foreach($dtoMethodMetaData in $dtoMethodMetaDataList)
		#if($value.getColumnName() == $dtoMethodMetaData.getColumnMetaData().getColumnName())
			#set($setter = "set$dtoMethodMetaData.getMethodName()")
			params.${setter}(stubDto.get$dtoMethodMetaData.getMethodName()());
		#end
	#end
#end
#end

## = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
##       Generate setters fro stubDto
## = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
#macro( stubDto $pkMetaData $dtoMethodMetaDataList )
#foreach($dtoMethodMetaData in $dtoMethodMetaDataList)
	#set($setter = "set$dtoMethodMetaData.getMethodName()")
	#set($colMetaData = $dtoMethodMetaData.getColumnMetaData())
	#set($classNameArr = $dtoMethodMetaData.getClassTypeName().split('\.'))
	#set($classPos = $classNameArr.size() - 1)
	#set($className = $classNameArr.get($classPos))	
	#set($S = ' ')
	#set($isID = $StringUtils.endsWith($dtoMethodMetaData.getMethodName().toLowerCase(),"id"))

	#if ($dtoMethodMetaData.getMethodName().toLowerCase() == 'value')
	${dtoVarName}.${setter}("test-value");
	#elseif ($colMetaData.getNullable() == "1")
	${dtoVarName}.${setter}(null);
	#elseif ($className == 'String')
	${dtoVarName}.${setter}("~");
	#elseif ($className == 'Integer')
		#if($isID)
			${dtoVarName}.${setter}(Integer.valueOf(1));
		#else
			${dtoVarName}.${setter}(new Random().nextInt(2100 - 1800) + 1800);
		#end
	#elseif ($className == 'Boolean')
	${dtoVarName}.${setter}(false);
	#elseif ($className == 'Timestamp')
	${dtoVarName}.${setter}(new Timestamp(System.currentTimeMillis()));
	#elseif ($className == 'Date')
	${dtoVarName}.${setter}(new java.sql.Date(System.currentTimeMillis()));
	#elseif ($className == 'Time')
	${dtoVarName}.${setter}(new java.sql.Time(System.currentTimeMillis()));
	#elseif ($className == 'BigDecimal')
	${dtoVarName}.${setter}(BigDecimal.ONE);
	#elseif ($className == 'InputStream')
	${dtoVarName}.${setter}(new ByteArrayInputStream("test data".getBytes()));
	#elseif ($className == 'ROWID')
	// No need to set ROWID.
	#else
	${dtoVarName}.${setter}(new ${className}("1"));
	#end
#end
#end

## = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
##       Generate max ID setter
## = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
#macro(genMaxId $isAutoIncrement $type $fieldName )
#if(${type}=='java.math.BigDecimal')
	#if($isAutoIncrement)
	BigDecimal maxId = fetchMax${fieldName}().get${fieldName}();
	#else
	BigDecimal maxId = fetchMax${fieldName}().get${fieldName}().add(BigDecimal.ONE);
	#end
#elseif($type=='java.lang.Integer')
	#if($isAutoIncrement)
	Integer maxId = fetchMax${fieldName}().get${fieldName}();
	#else 
	Integer maxId =	fetchMax${fieldName}().get${fieldName}() + 1;
	#end
#elseif($type=='java.sql.Timestamp')
	#if($isAutoIncrement)
	Timestamp maxId = fetchMax${fieldName}().get${fieldName}();
	#else 
	Timestamp maxId = new Timestamp(DateUtils.addDays(fetchMax${fieldName}(), 1).getTime());
	#end	
#elseif($type=='java.lang.String')
	#if($isAutoIncrement)
	String maxId = fetchMax${fieldName}().get${fieldName}();
	#else 
	String maxId = "~" + StringUtils.substring(fetchMaxId(), 1);
	#end				
#elseif($type=='oracle.sql.ROWID')
// No need to set ${fieldName}. It's a $type. 
#else
##stubDto.set${fieldName}(fetchMax${fieldName}());
##stubDto.set${fieldName}(fetchMax${fieldName}().get${fieldName}());
Object maxId = fetchMax${fieldName}().get${fieldName}();
#end

stubDto.set${fieldName}(maxId);
#end